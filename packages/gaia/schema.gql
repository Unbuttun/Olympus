# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateBlog {
  avg: BlogAvgAggregate
  count: BlogCountAggregate
  max: BlogMaxAggregate
  min: BlogMinAggregate
  sum: BlogSumAggregate
}

type Blog {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  viewCount: Int!
}

type BlogAvgAggregate {
  id: Float!
  viewCount: Float!
}

type BlogCountAggregate {
  _all: Int!
  createdAt: Int
  id: Int!
  name: Int
  updatedAt: Int
  viewCount: Int!
}

input BlogCreateInput {
  authors: UserCreateNestedManyWithoutBlogInput
  createdAt: DateTime
  name: String!
  posts: PostCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  viewCount: Int
}

input BlogCreateNestedOneWithoutAuthorsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutAuthorsInput
  create: BlogCreateWithoutAuthorsInput
}

input BlogCreateNestedOneWithoutPostsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPostsInput
  create: BlogCreateWithoutPostsInput
}

input BlogCreateOrConnectWithoutAuthorsInput {
  create: BlogCreateWithoutAuthorsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutPostsInput {
  create: BlogCreateWithoutPostsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateWithoutAuthorsInput {
  createdAt: DateTime
  name: String!
  posts: PostCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  viewCount: Int
}

input BlogCreateWithoutPostsInput {
  authors: UserCreateNestedManyWithoutBlogInput
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  viewCount: Int
}

type BlogMaxAggregate {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
  viewCount: Int!
}

type BlogMinAggregate {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
  viewCount: Int!
}

input BlogOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  viewCount: SortOrder
}

input BlogRelationFilter {
  is: BlogWhereInput
  isNot: BlogWhereInput
}

enum BlogScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
  viewCount
}

type BlogSumAggregate {
  id: Int!
  viewCount: Int!
}

input BlogUpdateInput {
  authors: UserUpdateManyWithoutBlogInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
}

input BlogUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
}

input BlogUpdateOneWithoutAuthorsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutAuthorsInput
  create: BlogCreateWithoutAuthorsInput
  delete: Boolean
  disconnect: Boolean
  update: BlogUpdateWithoutAuthorsInput
  upsert: BlogUpsertWithoutAuthorsInput
}

input BlogUpdateOneWithoutPostsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPostsInput
  create: BlogCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: BlogUpdateWithoutPostsInput
  upsert: BlogUpsertWithoutPostsInput
}

input BlogUpdateWithoutAuthorsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutPostsInput {
  authors: UserUpdateManyWithoutBlogInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
}

input BlogUpsertWithoutAuthorsInput {
  create: BlogCreateWithoutAuthorsInput!
  update: BlogUpdateWithoutAuthorsInput!
}

input BlogUpsertWithoutPostsInput {
  create: BlogCreateWithoutPostsInput!
  update: BlogUpdateWithoutPostsInput!
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  authors: UserListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
}

input BlogWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createBlog(data: BlogCreateInput!): Blog!
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteManyBlog(where: BlogWhereInput): AffectedRowsOutput!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog
  updateManyBlog(data: BlogUpdateManyMutationInput!, where: BlogWhereInput): AffectedRowsOutput!
  upsertBlog(create: BlogCreateInput!, update: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PostCreateNestedManyWithoutBlogInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutBlogInput!]
  create: [PostCreateWithoutBlogInput!]
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateOrConnectWithoutBlogInput {
  create: PostCreateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutBlogInput {
  User: UserCreateNestedOneWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostCreateWithoutUserInput {
  blog: BlogCreateNestedOneWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  blogId: IntNullableFilter
  id: IntFilter
  title: StringFilter
  userId: IntNullableFilter
}

input PostUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutBlogInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutBlogInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutBlogInput!]
  create: [PostCreateWithoutBlogInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [PostUpdateManyWithWhereWithoutBlogInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutBlogInput!]
}

input PostUpdateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateWithWhereUniqueWithoutBlogInput {
  data: PostUpdateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutBlogInput {
  User: UserUpdateOneWithoutPostsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutUserInput {
  blog: BlogUpdateOneWithoutPostsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutBlogInput {
  create: PostCreateWithoutBlogInput!
  update: PostUpdateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  User: UserRelationFilter
  blog: BlogRelationFilter
  blogId: IntNullableFilter
  id: IntFilter
  tags: TagListRelationFilter
  title: StringFilter
  userId: IntNullableFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  aggregateBlog(cursor: BlogWhereUniqueInput, orderBy: [BlogOrderByInput!], skip: Int, take: Int, where: BlogWhereInput): AggregateBlog!
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(cursor: BlogWhereUniqueInput, distinct: [BlogScalarFieldEnum!], orderBy: [BlogOrderByInput!], skip: Int, take: Int, where: BlogWhereInput): [Blog!]!
  findFirstBlog(cursor: BlogWhereUniqueInput, distinct: [BlogScalarFieldEnum!], orderBy: [BlogOrderByInput!], skip: Int, take: Int, where: BlogWhereInput): Blog
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input TagCreateNestedManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateOrConnectWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutPostsInput {
  label: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  id: IntFilter
  label: StringFilter
}

input TagUpdateManyMutationInput {
  label: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutPostsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutPostsInput {
  label: StringFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: IntFilter
  label: StringFilter
  posts: PostListRelationFilter
}

input TagWhereUniqueInput {
  id: Int
}

input UserCreateNestedManyWithoutBlogInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutBlogInput!]
  create: [UserCreateWithoutBlogInput!]
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutBlogInput {
  create: UserCreateWithoutBlogInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutBlogInput {
  createdAt: DateTime
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  rating: Float!
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  blog: BlogCreateNestedOneWithoutAuthorsInput
  createdAt: DateTime
  name: String
  rating: Float!
  updatedAt: DateTime
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  blogId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  rating: FloatFilter
  updatedAt: DateTimeFilter
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutBlogInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutBlogInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutBlogInput!]
  create: [UserCreateWithoutBlogInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [UserUpdateManyWithWhereWithoutBlogInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBlogInput!]
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithWhereUniqueWithoutBlogInput {
  data: UserUpdateWithoutBlogInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutBlogInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  blog: BlogUpdateOneWithoutAuthorsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutBlogInput {
  create: UserCreateWithoutBlogInput!
  update: UserUpdateWithoutBlogInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  blog: BlogRelationFilter
  blogId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
  rating: FloatFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: Int
}
