# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateSession {
  count: SessionCountAggregate
  max: SessionMaxAggregate
  min: SessionMinAggregate
}

type AggregateTokens {
  count: TokensCountAggregate
  max: TokensMaxAggregate
  min: TokensMinAggregate
}

type AggregateUser {
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumTokenTypeFieldUpdateOperationsInput {
  set: TokenType
}

input EnumTokenTypeFilter {
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeFilter
  notIn: [TokenType!]
}

input EnumTokenTypeWithAggregatesFilter {
  count: NestedIntFilter
  equals: TokenType
  in: [TokenType!]
  max: NestedEnumTokenTypeFilter
  min: NestedEnumTokenTypeFilter
  not: NestedEnumTokenTypeWithAggregatesFilter
  notIn: [TokenType!]
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input EnumUserRoleWithAggregatesFilter {
  count: NestedIntFilter
  equals: UserRole
  in: [UserRole!]
  max: NestedEnumUserRoleFilter
  min: NestedEnumUserRoleFilter
  not: NestedEnumUserRoleWithAggregatesFilter
  notIn: [UserRole!]
}

type FieldError {
  field: String!
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  equals: JSON
  not: JSON
}

input JsonWithAggregatesFilter {
  count: NestedIntFilter
  equals: JSON
  max: NestedJsonFilter
  min: NestedJsonFilter
  not: JSON
}

type Mutation {
  Logout: Boolean!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTokens(data: [TokensCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createSession(data: SessionCreateInput!): Session!
  createTokens(data: TokensCreateInput!): Tokens!
  createUser(data: UserCreateInput!): User!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyTokens(where: TokensWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteTokens(where: TokensWhereUniqueInput!): Tokens
  deleteUser(where: UserWhereUniqueInput!): User
  login(options: UserCreateInput!): UserResponse!
  register(options: UserCreateInput!): UserResponse!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyTokens(data: TokensUpdateManyMutationInput!, where: TokensWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateTokens(data: TokensUpdateInput!, where: TokensWhereUniqueInput!): Tokens
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertTokens(create: TokensCreateInput!, update: TokensUpdateInput!, where: TokensWhereUniqueInput!): Tokens!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  verifyUser(token: String!): Boolean!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumTokenTypeFilter {
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeFilter
  notIn: [TokenType!]
}

input NestedEnumTokenTypeWithAggregatesFilter {
  count: NestedIntFilter
  equals: TokenType
  in: [TokenType!]
  max: NestedEnumTokenTypeFilter
  min: NestedEnumTokenTypeFilter
  not: NestedEnumTokenTypeWithAggregatesFilter
  notIn: [TokenType!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedEnumUserRoleWithAggregatesFilter {
  count: NestedIntFilter
  equals: UserRole
  in: [UserRole!]
  max: NestedEnumUserRoleFilter
  min: NestedEnumUserRoleFilter
  not: NestedEnumUserRoleWithAggregatesFilter
  notIn: [UserRole!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  equals: JSON
  not: JSON
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateTokens(cursor: TokensWhereUniqueInput, orderBy: [TokensOrderByInput!], skip: Int, take: Int, where: TokensWhereInput): AggregateTokens!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstTokens(cursor: TokensWhereUniqueInput, distinct: [TokensScalarFieldEnum!], orderBy: [TokensOrderByInput!], skip: Int, take: Int, where: TokensWhereInput): Tokens
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  findManyTokens(cursor: TokensWhereUniqueInput, distinct: [TokensScalarFieldEnum!], orderBy: [TokensOrderByInput!], skip: Int, take: Int, where: TokensWhereInput): [Tokens!]!
  findUniqueTokens(where: TokensWhereUniqueInput!): Tokens
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupByTokens(by: [TokensScalarFieldEnum!]!, having: TokensScalarWhereWithAggregatesInput, orderBy: [TokensOrderByInput!], skip: Int, take: Int, where: TokensWhereInput): [TokensGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  session(where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Session {
  expire: DateTime!
  sess: JSON!
  sid: String!
}

type SessionCountAggregate {
  _all: Int!
  expire: Int
  sess: Int
  sid: Int
}

input SessionCreateInput {
  expire: DateTime!
  sess: JSON!
  sid: String!
}

input SessionCreateManyInput {
  expire: DateTime!
  sess: JSON!
  sid: String!
}

type SessionGroupBy {
  count: SessionCountAggregate
  expire: DateTime!
  max: SessionMaxAggregate
  min: SessionMinAggregate
  sess: JSON!
  sid: String!
}

type SessionMaxAggregate {
  expire: DateTime
  sid: String
}

type SessionMinAggregate {
  expire: DateTime
  sid: String
}

input SessionOrderByInput {
  expire: SortOrder
  sess: SortOrder
  sid: SortOrder
}

enum SessionScalarFieldEnum {
  expire
  sess
  sid
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  expire: DateTimeWithAggregatesFilter
  sess: JsonWithAggregatesFilter
  sid: StringWithAggregatesFilter
}

input SessionUpdateInput {
  expire: DateTimeFieldUpdateOperationsInput
  sess: JSON
  sid: StringFieldUpdateOperationsInput
}

input SessionUpdateManyMutationInput {
  expire: DateTimeFieldUpdateOperationsInput
  sess: JSON
  sid: StringFieldUpdateOperationsInput
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expire: DateTimeFilter
  sess: JsonFilter
  sid: StringFilter
}

input SessionWhereUniqueInput {
  sid: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum TokenType {
  ACCOUNT_VERIFICATION
  FORGET_PASSWORD
}

type Tokens {
  createdAt: DateTime!
  expire: DateTime!
  id: String!
  token: String!
  type: TokenType!
  userId: String!
}

type TokensCountAggregate {
  _all: Int!
  createdAt: Int
  expire: Int
  id: Int
  token: Int
  type: Int
  userId: Int
}

input TokensCreateInput {
  createdAt: DateTime
  expire: DateTime!
  id: String
  token: String!
  type: TokenType!
  userId: String!
}

input TokensCreateManyInput {
  createdAt: DateTime
  expire: DateTime!
  id: String
  token: String!
  type: TokenType!
  userId: String!
}

type TokensGroupBy {
  count: TokensCountAggregate
  createdAt: DateTime!
  expire: DateTime!
  id: String!
  max: TokensMaxAggregate
  min: TokensMinAggregate
  token: String!
  type: TokenType!
  userId: String!
}

type TokensMaxAggregate {
  createdAt: DateTime
  expire: DateTime
  id: String
  token: String
  type: TokenType
  userId: String
}

type TokensMinAggregate {
  createdAt: DateTime
  expire: DateTime
  id: String
  token: String
  type: TokenType
  userId: String
}

input TokensOrderByInput {
  createdAt: SortOrder
  expire: SortOrder
  id: SortOrder
  token: SortOrder
  type: SortOrder
  userId: SortOrder
}

enum TokensScalarFieldEnum {
  createdAt
  expire
  id
  token
  type
  userId
}

input TokensScalarWhereWithAggregatesInput {
  AND: [TokensScalarWhereWithAggregatesInput!]
  NOT: [TokensScalarWhereWithAggregatesInput!]
  OR: [TokensScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expire: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
  type: EnumTokenTypeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input TokensUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expire: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  type: EnumTokenTypeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TokensUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expire: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  type: EnumTokenTypeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TokensWhereInput {
  AND: [TokensWhereInput!]
  NOT: [TokensWhereInput!]
  OR: [TokensWhereInput!]
  createdAt: DateTimeFilter
  expire: DateTimeFilter
  id: StringFilter
  token: StringFilter
  type: EnumTokenTypeFilter
  userId: StringFilter
}

input TokensWhereUniqueInput {
  id: String
  token: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  password: String!
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int
  email: Int
  id: Int
  name: Int
  password: Int
  role: Int
  updatedAt: Int
  verified: Int
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  name: String
  password: String!
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String!
  id: String
  name: String
  password: String!
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

type UserGroupBy {
  count: UserCountAggregate
  createdAt: DateTime!
  email: String!
  id: String!
  max: UserMaxAggregate
  min: UserMinAggregate
  name: String
  password: String!
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: String
  name: String
  password: String
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: String
  name: String
  password: String
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

enum UserRole {
  ADMIN
  FREE
  MODERATOR
  PREMIUM
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  role
  updatedAt
  verified
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
  role: EnumUserRoleWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  verified: BoolWithAggregatesFilter
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  password: StringFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
