# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateSession {
  count: SessionCountAggregate
  max: SessionMaxAggregate
  min: SessionMinAggregate
}

type AggregateUser {
  avg: UserAvgAggregate
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

type FieldError {
  field: String!
  message: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  equals: JSON
  not: JSON
}

type Mutation {
  Logout: Boolean!
  createSession(data: SessionCreateInput!): Session!
  createUser(data: UserCreateInput!): User!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteUser(where: UserWhereUniqueInput!): User
  login(options: UserCreateInput!): UserResponse!
  register(options: UserCreateInput!): UserResponse!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  session(where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Session {
  expire: DateTime!
  sess: JSON!
  sid: String!
}

type SessionCountAggregate {
  _all: Int!
  expire: Int
  sess: Int
  sid: Int
}

input SessionCreateInput {
  expire: DateTime!
  sess: JSON!
  sid: String!
}

type SessionMaxAggregate {
  expire: DateTime
  sid: String
}

type SessionMinAggregate {
  expire: DateTime
  sid: String
}

input SessionOrderByInput {
  expire: SortOrder
  sess: SortOrder
  sid: SortOrder
}

enum SessionScalarFieldEnum {
  expire
  sess
  sid
}

input SessionUpdateInput {
  expire: DateTimeFieldUpdateOperationsInput
  sess: JSON
  sid: StringFieldUpdateOperationsInput
}

input SessionUpdateManyMutationInput {
  expire: DateTimeFieldUpdateOperationsInput
  sess: JSON
  sid: StringFieldUpdateOperationsInput
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expire: DateTimeFilter
  sess: JsonFilter
  sid: StringFilter
}

input SessionWhereUniqueInput {
  sid: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  password: String!
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

type UserAvgAggregate {
  id: Float!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int
  email: Int
  id: Int!
  name: Int
  password: Int
  role: Int
  updatedAt: Int
  verified: Int
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: Int!
  name: String
  password: String
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: Int!
  name: String
  password: String
  role: UserRole
  updatedAt: DateTime
  verified: Boolean
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

enum UserRole {
  ADMIN
  FREE
  MODERATOR
  PREMIUM
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  role
  updatedAt
  verified
}

type UserSumAggregate {
  id: Int!
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  password: StringFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
